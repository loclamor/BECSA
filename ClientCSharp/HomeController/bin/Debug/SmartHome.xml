<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartHome</name>
    </assembly>
    <members>
        <member name="T:SmartHome.HomeResponse">
            <summary>
            Represent the server of Home response (cf. doc serveur web.pdf for more details)
            </summary>
        </member>
        <member name="M:SmartHome.HomeResponse.Code">
            <summary>
            Retrieve code of the response from Status
            </summary>
            <returns>The code of the home server response</returns>
        </member>
        <member name="M:SmartHome.HomeResponse.#ctor(SmartHome.JSON)">
            <summary>
            Extract JSON from home server response and fill this object with it 
            </summary>
            <param name="json">JSON object to parse</param>
        </member>
        <member name="M:SmartHome.HomeResponse.Create(SmartHome.JSON)">
            <summary>
            Create a HomeResponse with JSON object received from home server
            </summary>
            <param name="json">JSON object to parse</param>
            <returns>The corresponding HomeResponse of JSON object</returns>
        </member>
        <member name="P:SmartHome.HomeResponse.Status">
            <summary>
            Code of the response
            </summary>
        </member>
        <member name="P:SmartHome.HomeResponse.OK">
            <summary>
            Indicate if the response success
            </summary>
        </member>
        <member name="P:SmartHome.HomeResponse.Message">
            <summary>
            Code signification
            </summary>
        </member>
        <member name="P:SmartHome.HomeResponse.Data">
            <summary>
            JSON object returned by server
            </summary>
        </member>
        <member name="T:SmartHome.HomeResponse.StatusType">
            <summary>
            Home serveur status (cf. doc serveur web.pdf)
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.Pending">
            <summary>
            Wait code response
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.Unknwon">
            <summary>
            Unknwon code
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.Done">
            <summary>
            success opération effectuée avec succès
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.DoneEntityCreated">
            <summary>
            success opération effectuée, une Entite a été créée
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.DoneWithoutGuarantee">
            <summary>
            success opération effectuée, mais sans garantie de résultat
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.FailBadParameters">
            <summary>
            error échec, paramètre(s) incorrect(s)
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.FailNotFound">
            <summary>
            error échec, l’Entite n’a pas été trouvée
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.FailUnknownOperator">
            <summary>
            error échec, l’opération n’est pas disponible
            </summary>
        </member>
        <member name="F:SmartHome.HomeResponse.StatusType.Fail">
            <summary>
            error échec, erreur indéterminée
            </summary>
        </member>
        <member name="T:SmartHome.HTTPRequest">
            <summary>
            Utils class that create HTTP request send it and retrieve response.
            </summary>
        </member>
        <member name="F:SmartHome.HTTPRequest._request">
            <summary>
            Class used to make HTTP request 
            </summary>
        </member>
        <member name="F:SmartHome.HTTPRequest._responseRetrieved">
            <summary>
            True if response retrieved
            </summary>
        </member>
        <member name="M:SmartHome.HTTPRequest.#ctor(System.String)">
            <summary>
            Create and initialize the HTTP Request 
            </summary>
            <param name="url">URL desired</param>
        </member>
        <member name="M:SmartHome.HTTPRequest.#ctor(System.String,SmartHome.Message)">
            <summary>
            Create and initialize the HTTP Request with a defined message
            </summary>
            <param name="url">URL desired</param>
            <param name="msg">Message to send</param>
        </member>
        <member name="M:SmartHome.HTTPRequest.GetResponse">
            <summary>
            Retrieve response of the HTTP Request
            </summary>
            <returns>HTTP response</returns>
        </member>
        <member name="P:SmartHome.HTTPRequest.Status">
            <summary>
            HTTP request status, or ERROR if request not done 
            </summary>
        </member>
        <member name="P:SmartHome.HTTPRequest.Response">
            <summary>
            HTTP response
            </summary>
        </member>
        <member name="T:SmartHome.Piece">
            <summary>
            Represent a room of the SmartHome
            </summary>
        </member>
        <member name="M:SmartHome.Piece.#ctor(SmartHome.JSON)">
            <summary>
            Create a room from a JSON Object. (cf. doc serveur web.pdf) 
            </summary>
            <param name="json">JSON object to read</param>
        </member>
        <member name="M:SmartHome.Piece.Refresh(SmartHome.JSON)">
            <summary>
            Refresh the room from a JSON Object. (cf. doc serveur web.pdf)
            </summary>
            <param name="json">JSON object to read</param>
        </member>
        <member name="M:SmartHome.Piece.ToString">
            <summary>
            Convert this room into an human-readable string
            </summary>
            <returns>String representation of this room</returns>
        </member>
        <member name="P:SmartHome.Piece.Nom">
            <summary>
            Name of the Piece
            </summary>
        </member>
        <member name="P:SmartHome.Piece.LumiereAllumer">
            <summary>
            Light on/off state of the room
            </summary>
            <remarks>Returns true if the light is on</remarks>
        </member>
        <member name="P:SmartHome.Piece.PorteDeverrouiller">
            <summary>
            Door locked/unlocked state of the room
            </summary>
            <remarks>Returns true if the door is lock</remarks>
        </member>
        <member name="P:SmartHome.Piece.VoletOuvert">
            <summary>
            Flap opened/closed state of the room
            </summary>
            <remarks>Returns true if the flap is open</remarks>
        </member>
        <member name="P:SmartHome.Piece.ALumiere">
            <summary>
            Check if a light is present
            </summary>
            <remarks>Returns true if this room have lights</remarks>
        </member>
        <member name="P:SmartHome.Piece.APorte">
            <summary>
            Check if a door is present
            </summary>
            <remarks>Returns true if this room have doors</remarks>
        </member>
        <member name="P:SmartHome.Piece.AVolet">
            <summary>
            Check if a flap is present
            </summary>
            <remarks>Returns true if this room have flap</remarks>
        </member>
        <member name="T:SmartHome.Home">
            <summary>
            Home main controller which interact directly with the Home server
            </summary>
        </member>
        <member name="F:SmartHome.Home._pieces">
            <summary>
            Room availaible from home server
            </summary>
        </member>
        <member name="F:SmartHome.Home._onPieceUpdate">
            <summary>
            Event called when a room have been updated
            </summary>
        </member>
        <member name="F:SmartHome.Home._onHomeUpdate">
            <summary>
            Event called when home have been updated
            </summary>
        </member>
        <member name="F:SmartHome.Home._lastUpdateTick">
            <summary>
            Last System.Environment.TickCount when a refresh was done
            </summary>
        </member>
        <member name="M:SmartHome.Home.#ctor">
            <summary>
            Initialize an empty Home. HomeURI need to be set after before using refresh.
            </summary>
        </member>
        <member name="M:SmartHome.Home.#ctor(System.String,System.Int32)">
            <summary>
            Initialize Home with the location of the Home server set
            </summary>
            <param name="uri">URI of the Home server</param>
            <param name="refreshFrequency">Frequency of refresh in milliseconds (set to 0 to have direct refresh)</param>
        </member>
        <member name="M:SmartHome.Home.RegisterPieceUpdateEvent(SmartHome.Home.PieceUpdate)">
            <summary>
            Register an update event for room
            </summary>
            <param name="update">Update function called when a room have been update</param>
        </member>
        <member name="M:SmartHome.Home.RegisterHomeUpdateEvent(SmartHome.Home.HomeUpdate)">
            <summary>
            Register an update event for home
            </summary>
            <param name="update">Update function called when home have been update</param>
        </member>
        <member name="M:SmartHome.Home.UnregisterPieceUpdateEvent(SmartHome.Home.PieceUpdate)">
            <summary>
            Unregister an update event for room
            </summary>
            <param name="update">Update function to unregister</param>
        </member>
        <member name="M:SmartHome.Home.UnregisterHomeUpdateEvent(SmartHome.Home.HomeUpdate)">
            <summary>
            Unregister an update event for home
            </summary>
            <param name="update">Update function to unregister</param>
        </member>
        <member name="M:SmartHome.Home.Refresh">
            <summary>
            Refresh list of rooms and status of each rooms.
            </summary>
            <remarks>Will automatically fired room update and home update event if needed and configured (<see cref="M:SmartHome.Home.RegisterPieceUpdateEvent(SmartHome.Home.PieceUpdate)"/>, <see cref="M:SmartHome.Home.RegisterHomeUpdateEvent(SmartHome.Home.HomeUpdate)"/>)</remarks>
            <returns>Response of the Home server</returns>
        </member>
        <member name="M:SmartHome.Home.GetPieceCount">
            <summary>
            Get the number of the room
            </summary>
            <returns>Room count</returns>
        </member>
        <member name="M:SmartHome.Home.GetPiece(System.String)">
            <summary>
            Get a room by name
            </summary>
            <param name="name">Name of the desired room</param>
            <returns>Room found Or null if no room found</returns>
        </member>
        <member name="M:SmartHome.Home.GetPiece(System.Int32)">
            <summary>
            Get a room by id
            </summary>
            <param name="id">Id of the desired room</param>
            <returns>Room found Or null if no room found</returns>
        </member>
        <member name="M:SmartHome.Home.AllumerLumiere(System.String)">
            <summary>
            Switch on light of a room
            </summary>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.EteindreLumiere(System.String)">
            <summary>
            Switch off light of a room
            </summary>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.AllumerLumiere(SmartHome.Piece)">
            <summary>
            Switch on light of a room
            </summary>
            <param name="piece">Room desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.EteindreLumiere(SmartHome.Piece)">
            <summary>
            Switch off light of a room
            </summary>
            <param name="piece">Room desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.AllumerTout">
            <summary>
            Switch on all light
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.EteindreTout">
            <summary>
            Switch off all light
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.VerrouillerPorte(System.String)">
            <summary>
            Lock the door of a room
            </summary>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.DeverrouillerPorte(System.String)">
            <summary>
            Unlock the door of a room
            </summary>
            <param name="piece">Rom name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.VerrouillerPorte(SmartHome.Piece)">
            <summary>
            Lock the door of a room
            </summary>
            <param name="piece">Room desired</param>
            <returns></returns>
        </member>
        <member name="M:SmartHome.Home.DeverrouillerPorte(SmartHome.Piece)">
            <summary>
            Unlock the door of a room
            </summary>
            <param name="piece">Rom desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.VerrouillerTout">
            <summary>
            Lock all the door of home
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.DeverrouillerTout">
            <summary>
            UnLock all the door of home
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.OuvrirVolet(System.String)">
            <summary>
            Open flaps of a room
            </summary>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.FermerVolet(System.String)">
            <summary>
            Close flaps of a room
            </summary>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.OuvrirVolet(SmartHome.Piece)">
            <summary>
            Open flaps of a room
            </summary>
            <param name="piece">Room desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.FermerVolet(SmartHome.Piece)">
            <summary>
            Close flaps of a room
            </summary>
            <param name="piece">Room desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.OuvrirTout">
            <summary>
            Open all flaps of home
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.FermerTout">
            <summary>
            Close all flaps of home
            </summary>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.ExecuteAction(System.String,System.String)">
            <summary>
            Execute an action to a controller of the home
            </summary>
            <remarks>For an expansive details of controller/action availaible cf. doc serveur web.pdf</remarks>
            <param name="controller">Controller desired</param>
            <param name="action">Action desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.ExecuteAction(System.String,System.String,System.String)">
            <summary>
            Execute an action to a controller of the home
            </summary>
            <remarks>For an expansive details of controller/action availaible cf. doc serveur web.pdf</remarks>
            <param name="controller">Controller desired</param>
            <param name="action">Action desired</param>
            <param name="piece">Room name desired</param>
            <returns>Home server response</returns>
        </member>
        <member name="M:SmartHome.Home.ToString">
            <summary>
            Convert home into human-readable string
            </summary>
            <returns>String representation of this home</returns>
        </member>
        <member name="P:SmartHome.Home.HomeURI">
            <summary>
            Home server URI
            </summary>
        </member>
        <member name="P:SmartHome.Home.RefreshFrequency">
            <summary>
            Frequency of refresh in milliseconds
            </summary>
        </member>
        <member name="T:SmartHome.Home.RoomUpdateKind">
            <summary>
            Action that an room can do
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.SwitchOnRoomLight">
            <summary>
            Indicate that a room light have been switched to on
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.SwitchOffRoomLight">
            <summary>
            Indicate that a room light have been switched to off
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.OpenRoomDoor">
            <summary>
            Indicate that a room door have been opened
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.CloseRoomDoor">
            <summary>
            Indicate that a room door have been closed
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.OpenRoomFlap">
            <summary>
            Indicate that a room flap have been opened
            </summary>
        </member>
        <member name="F:SmartHome.Home.RoomUpdateKind.CloseRoomFlap">
            <summary>
            Indicate that a room flap have been closed
            </summary>
        </member>
        <member name="T:SmartHome.Home.HomeUpdateKind">
            <summary>
            Action that the home can do
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.SwitchOnAllRoomLight">
            <summary>
            Indicate that all home lights have been switched to on
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.SwitchOffAllRoomLight">
            <summary>
            Indicate that all home lights have been switched to off
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.OpenAllDoor">
            <summary>
            Indicate that all home doors have been opened
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.CloseAllDoor">
            <summary>
            Indicate that all home doors have been closed
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.OpenAllFlap">
            <summary>
            Indicate that all home flaps have been opened
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.CloseAllFlap">
            <summary>
            Indicate that all home flaps have been closed
            </summary>
        </member>
        <member name="F:SmartHome.Home.HomeUpdateKind.RoomCountChanged">
            <summary>
            Indicate that some room(s) have been added or removed
            </summary>
        </member>
        <member name="T:SmartHome.Home.PieceUpdate">
            <summary>
            Event function to detect when a Room have been updated
            </summary>
            <param name="p">Room updated</param>
            <param name="updateKind">Update kind</param>
        </member>
        <member name="T:SmartHome.Home.HomeUpdate">
            <summary>
            Event function to detect when the homve have been updated
            </summary>
            <param name="updateKind">Update kind</param>
        </member>
        <member name="T:SmartHome.JSON">
            <summary>
            JSON reader
            </summary>
        </member>
        <member name="F:SmartHome.JSON._childs">
            <summary>
            Private list of JSON childs.
            </summary>
            <remarks>Concern only JSON Object and JSON Array, since other type cannot have named child (cf. json specification)</remarks>
        </member>
        <member name="M:SmartHome.JSON.#ctor">
            <summary>
            Construct an empty JSON Object
            </summary>
            <remarks>Since this class is only a Reader of JSON, the next step from this point is to call <code>Parse</code> method.</remarks>
        </member>
        <member name="M:SmartHome.JSON.#ctor(System.String)">
            <summary>
            Construct a JSON Object from a string
            </summary>
            <remarks>Equivalent to using <code>Parse</code> method</remarks>
            <param name="str">String to parse</param>
        </member>
        <member name="M:SmartHome.JSON.Get(System.Int32)">
            <summary>
            Get a child by his position in the child list.
            </summary>
            <remarks>Concern only JSON Array and JSON Object, since other type cannot have named child (cf. json specification)</remarks>
            <param name="id">Position of the desired child</param>
            <returns>Child in question Or this object if child not found.</returns>
        </member>
        <member name="M:SmartHome.JSON.Get(System.String)">
            <summary>
            Get a child by his name
            </summary>
            <remarks>Concern only JSON Object, since other type cannot have named child (cf. json specification)</remarks>
            <param name="name">Name of the desired child</param>
            <returns>Child in question Or this object if child not found.</returns>
        </member>
        <member name="M:SmartHome.JSON.GetBoolValue(System.Boolean)">
            <summary>
            Retrieve boolean value of this JSON Object
            </summary>
            <param name="defaultValue">Value returned if this JSON Object is an Empty object</param>
            <returns>Boolean value of this JSON Object Or defaultValue</returns>
        </member>
        <member name="M:SmartHome.JSON.GetIntValue(System.Int32)">
            <summary>
            Retrieve integer value of this JSON Object
            </summary>
            <param name="defaultValue">Value returned if this JSON Object is an Empty object</param>
            <returns>Integer value of this JSON Object Or defaultValue</returns>
        </member>
        <member name="M:SmartHome.JSON.GetNumberValue(System.Double)">
            <summary>
            Retrieve double value of this JSON Object
            </summary>
            <param name="defaultValue">Value returned if this JSON Object is an Empty object</param>
            <returns>Double value of this JSON Object Or defaultValue</returns>
        </member>
        <member name="M:SmartHome.JSON.GetStringValue(System.String)">
            <summary>
            Retrieve string value of this JSON Object
            </summary>
            <param name="defaultValue">Value returned if this JSON Object is an Empty object</param>
            <returns>String value of this JSON Object Or defaultValue</returns>
        </member>
        <member name="M:SmartHome.JSON.Parse(System.String)">
            <summary>
            Load JSON data from a string
            </summary>
            <param name="str">String to load</param>
            <returns>True if no errors encountered</returns>
        </member>
        <member name="M:SmartHome.JSON.privParse(System.String,SmartHome.JSON.Token@)">
            <summary>
            Load JSON data from a string
            </summary>
            <param name="str">String to parse</param>
            <param name="tok">Current token to analyse</param>
            <returns>True if parsed without errors (correct syntax, etc ...)</returns>
        </member>
        <member name="M:SmartHome.JSON.privParseChild(System.String,SmartHome.JSON.Token@)">
            <summary>
            Load JSON childs from a string
            </summary>
            <param name="str">String to parse</param>
            <param name="tok">Current token to analyse</param>
            <returns>True if parsed without errors (correct syntax, etc ...)</returns>
        </member>
        <member name="M:SmartHome.JSON.ToString">
            <summary>
            Convert JSON object to a human-readable string.
            </summary>
            <returns>String representation of this JSON object</returns>
        </member>
        <member name="M:SmartHome.JSON.ToString(System.String)">
            <summary>
            Convert JSON object to a human-readable string.
            </summary>
            <param name="tabIndent">Indentation used for each new line</param>
            <returns>String representation of this JSON object</returns>
        </member>
        <member name="M:SmartHome.JSON.NextToken(System.String,SmartHome.JSON.Token)">
            <summary>
            Retrieve the token just after a gived token.
            </summary>
            <param name="str">String to parse</param>
            <param name="fromToken">Start after this token</param>
            <returns>Token after fromToken</returns>
        </member>
        <member name="M:SmartHome.JSON.NextToken(System.String,System.Int32)">
            <summary>
            Retrieve token from a position.
            </summary>
            <param name="str">String to parse</param>
            <param name="fromPos">Start position</param>
            <returns>The token at fromPos</returns>
        </member>
        <member name="M:SmartHome.JSON.IsTokenEgalTo(SmartHome.JSON.Token,System.String)">
            <summary>
            Check if a token is egal to a value.
            </summary>
            <param name="tok">Token to test</param>
            <param name="value">Value to test</param>
            <returns>True if tok == value</returns>
        </member>
        <member name="M:SmartHome.JSON.GetTokenValue(SmartHome.JSON.Token)">
            <summary>
            Retrieve value of a token.
            </summary>
            <param name="tok">Token considered</param>
            <returns>Value of tok</returns>
        </member>
        <member name="P:SmartHome.JSON.Parent">
            <summary>
            Parent of this JSON object. Can be null.
            </summary>
            <remarks>If return null Then Root element</remarks>
        </member>
        <member name="P:SmartHome.JSON.Name">
            <summary>
            Name of this JSON object
            </summary>
        </member>
        <member name="P:SmartHome.JSON.Type">
            <summary>
            Type of this JSON Object (cf. ValueType, json specification)
            </summary>
        </member>
        <member name="P:SmartHome.JSON.Value">
            <summary>
            String value of this JSON object
            </summary>
            <remarks>To get a usable value in specific format you can use the helpers methods:
                        <see cref="M:SmartHome.JSON.GetBoolValue(System.Boolean)">GetBoolValue</see>, 
                        <see cref="M:SmartHome.JSON.GetIntValue(System.Int32)">GetIntValue</see>, 
                        <see cref="M:SmartHome.JSON.GetNumberValue(System.Double)">GetNumberValue</see>, 
                        <see cref="M:SmartHome.JSON.GetStringValue(System.String)">GetStringValue</see>.
            </remarks>
        </member>
        <member name="P:SmartHome.JSON.Count">
            <summary>
            Get child count
            </summary>
            <remarks>Concern only JSON Object and JSON Array, since other type cannot have child (cf. json specification)</remarks>
        </member>
        <member name="T:SmartHome.JSON.TokenType">
            <summary>
            Type of token availible
            </summary>
        </member>
        <member name="F:SmartHome.JSON.TokenType.TOK_WORD">
            <summary>
            Simple word, format: ("_" | [a-z] | [A-Z]) + ("_" | [a-z] | [A-Z] | [0-9])*
            </summary>
        </member>
        <member name="F:SmartHome.JSON.TokenType.TOK_SYMBOL">
            <summary>
            Symbol char.
            </summary>
        </member>
        <member name="F:SmartHome.JSON.TokenType.TOK_NUMBER">
            <summary>
            Number, format: (0 + "." + [0-9]*) | [0-9]*
            </summary>
        </member>
        <member name="F:SmartHome.JSON.TokenType.TOK_STRING">
            <summary>
            String, format: "\"" + CHARS + "\""
            </summary>
            <remarks>This parser respect the escaped sequence defined by JSON.</remarks>
        </member>
        <member name="F:SmartHome.JSON.TokenType.TOK_EOF">
            <summary>
            End of File. Always the last token returned by <see cref="M:SmartHome.JSON.NextToken(System.String,SmartHome.JSON.Token)">NextToken</see>.
            </summary>
        </member>
        <member name="T:SmartHome.JSON.Token">
            <summary>
            Structure representing a Token used by inter alia <see cref="M:SmartHome.JSON.NextToken(System.String,SmartHome.JSON.Token)">NextToken</see>
            </summary>
        </member>
        <member name="F:SmartHome.JSON.Token.type">
            <summary>
            Type of this token
            </summary>
        </member>
        <member name="F:SmartHome.JSON.Token.start">
            <summary>
            Start position of this token (used mainly for <see cref="M:SmartHome.JSON.NextToken(System.String,SmartHome.JSON.Token)">NextToken</see>)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.Token.len">
            <summary>
            Length of this token (used mainly for <see cref="M:SmartHome.JSON.NextToken(System.String,SmartHome.JSON.Token)">NextToken</see>)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.Token.value">
            <summary>
            Value of this token
            </summary>
        </member>
        <member name="T:SmartHome.JSON.ValueType">
            <summary>
            Value availible in JSON
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.EMPTY">
            <summary>
            Empty JSON Object (cf. json.org :: value empty)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.STRING">
            <summary>
            String JSON Object: "..." (cf. json.org :: value string)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.NUMBER">
            <summary>
            Number JSON Object (cf. json.org :: value number)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.OBJECT">
            <summary>
            JSON Object: {...} (cf. json.org :: value object)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.ARRAY">
            <summary>
            Array JSON Object: [...] (cf. json.org :: value array)
            </summary>
        </member>
        <member name="F:SmartHome.JSON.ValueType.BOOLEAN">
            <summary>
            Boolean JSON Object: true or false (cf. json.org :: value true, false)
            </summary>
        </member>
        <member name="T:SmartHome.Message">
            <summary>
            Message composer. Use user-defined parameters to produce a message ready to send
            </summary>
        </member>
        <member name="F:SmartHome.Message._params">
            <summary>
            User-defined parameters
            </summary>
        </member>
        <member name="M:SmartHome.Message.#ctor">
            <summary>
            Create an empty message
            </summary>
        </member>
        <member name="M:SmartHome.Message.#ctor(System.String)">
            <summary>
            Read a message from a string, formatted like URL parameters.
            </summary>
            <remarks></remarks>
            <param name="message"></param>
        </member>
        <member name="M:SmartHome.Message.IsEmpty">
            <summary>
            Check if no parameters present
            </summary>
            <returns>True if no parameters found</returns>
        </member>
        <member name="M:SmartHome.Message.IsNotEmpty">
            <summary>
            Check if parameters present
            </summary>
            <returns>True if parameters found</returns>
        </member>
        <member name="M:SmartHome.Message.Clear">
            <summary>
            Clear all parameters defined
            </summary>
        </member>
        <member name="M:SmartHome.Message.Set(System.String,System.String)">
            <summary>
            Modify or Add an parameters
            </summary>
            <param name="name">Name of the parameter to change or create</param>
            <param name="value">Value of the parameter</param>
            <returns>This object to enable chained call (example: msg.Set("test","42").Set("done","ok");)</returns>
        </member>
        <member name="M:SmartHome.Message.Get(System.String)">
            <summary>
            Get a parameter value
            </summary>
            <param name="name">Name of the desired parameter</param>
            <returns>Value of the parameter</returns>
        </member>
        <member name="M:SmartHome.Message.Remove(System.String)">
            <summary>
            Remove a parameter
            </summary>
            <param name="name">Name of the desired parameter</param>
        </member>
        <member name="M:SmartHome.Message.ToHTTPRequest">
            <summary>
            Retrieve all parameters formatted like URL parameters.
            </summary>
            <returns>Parameters list formatted like URL parameters.</returns>
        </member>
        <member name="M:SmartHome.Message.ExplodeHTTPRequest(System.String)">
            <summary>
            Set parameters from string 
            </summary>
            <param name="request">Parameters list formatted like URL parameters.</param>
        </member>
    </members>
</doc>
